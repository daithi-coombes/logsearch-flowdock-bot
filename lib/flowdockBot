#!/usr/bin/env node

var YAML = require('yamljs'),
	events = require('events'),
	https = require('https'),
	util = require('util'),
	flowdock;

var FlowDockBot = function flowdockBot(){

	events.EventEmitter.call(this);

	this.config = false;
	this.flows = {};
	this.target;

	var self = this;

	this.getConfig = function(){
		return this.config;
	}

	this.getFlows = function(fn){

		var _cb;
		fn ? _cb=fn : _cb=this.parseFlows;
		https.get(this.target+'/flows', _cb);
		return this;
	}

	this.getUsers = function(){}

	/**
	 * Callback for this.getFlows
	 * @param  {http.serverResponse}   resp The server response
	 * @param  {callback} fn   Callback
	 */
	this.parseFlows = function(resp, cb){
		var _data = '';
		var _self = self;
		var _cb = cb;

		resp.setEncoding('utf8');
		resp.on( 'data', function(chunk){
			_data += chunk;
		});
		resp.on( 'end', function(){
			var j = JSON.parse(_data);
			_self.emit('flowsComplete');

			if(_cb)
				_cb(j);
		});
	}

	this.foo = function(){
		console.log('foo is called');
	}

	this.request = function(endpoint, fn){

		var callback=fn;

		https.get(
			this.target+endpoint,
			function(resp){
			}
		);
	}

	this.setConfig = function(obj){
		this.config = obj;
		this.target = 'https://' + this.config.FLOW_TOKEN + '@api.flowdock.com';
	}
}
util.inherits(FlowDockBot, events.EventEmitter);
flowdock = new FlowDockBot();

var _ = {

	getBot: function(){
		return flowdock;
	},

	/**
	 * Sets the flowdock config.
	 * @param {object} configYml Location of yaml config file
	 * @return {object} return's this for chaining
	 */
	setConfig: function(obj){
		flowdock.setConfig(obj);
		return this;
	},

	/**
	 * main() method call
	 * @return {object} return's this for chaining
	 */
	run: function(){

		if(!flowdock.config)
			throw new Error('Please set the configuration for flowdock');

		flowdock.getFlows()
			.on('flowsComplete', flowdock.getUsers)
			.on('usersComplete', function(){
				console.log('usersComplete triggered. Write to log file...');
			});
	}
};

module.exports = _;
