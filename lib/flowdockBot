#!/usr/bin/env node

var YAML = require('yamljs'),
	async = require('async'),
	db = require(process.cwd()+'/lib/jsondb'),
	events = require('events'),
	exec = require('child_process').exec,
	fs = require('fs'),
	https = require('https'),
	util = require('util'),
	flowdock

var FlowDockBot = function flowdockBot(){

	events.EventEmitter.call(this)
	this.setMaxListeners(0)
	var self = this

	this.backupLogFile = true
	this.config = false
	this.countUserRequests=0
	this.filename = process.cwd()+'/logs/flowdock.log'
	this.flags = {
		'WRITING_BACKUP': false, //@see Timing flag for FlowDockBot.logBackup()
		'SYNC': false //@see this.setupDB()
	}
	this.flows = {}
	this.logData = []
	this.maxLogSize = 10000
	this.target

	this.getConfig = function(){

		return this.config
	}

	/**
	 * Makes request for flows.
	 * @param  {Function} fn Callback
	 * @return {FlowDockBot}      This instance for chaining
	 */
	this.getFlows = function(fn){

		var _cb
		fn ? _cb=fn : _cb=this.parseFlows
		https.get(this.target+'/flows', _cb)
		return self
	}

	/**
	 * Request user data for a flow
	 * @see this.parseUsers()
	 * @param  {string}   flowName Parametrized flow name
	 * @param  {Function} fn       Callback. Default FlowDockBot.parseUsers
	 * @return {FlowDockBot}            This instance for chaining
	 */
	this.getFlowUsers = function(flowName, fn){

		var _cb
		var _endpoint = this.target+'/flows/'+this.config.FLOW_ORG+'/'+flowName+'/users' 
		fn ? _cb=fn : _cb=this.parseUsers

		https.get(_endpoint, _cb)
		self.countUserRequests++
		return this
	}

	/**
	 * Create self.logData array from self.flows info
	 * @param  {Function} fn Callback
	 * @return {FlowDockBot}      This instanace for chaining
	 */
	this.getLogData = function(fn){

		if(!Object.keys(self.flows).length)
			throw new Error('No data recieved for writeLog(): FlowDockBot.flows is empty')

		var res = []

		//loop through flows
		for(var i in self.flows)

			//loop through users
			for(var x in self.flows[i].users)
				res.push({
					id: self.flows[i].users[x].id,
					flow: self.flows[i].parameterized_name,
					organization: self.config.FLOW_ORG,
					nick: self.flows[i].users[x].nick,
					last_activity: new Date(self.flows[i].users[x].last_activity).toISOString()
				})

		self.logData = res
		self.emit('logData')

		//do callback
		if(fn)
			fn(res)

		return this
	}

	/**
	 * Wrapper for getFlowUsers. Loops through this.flows and requests users
	 * @param  {Function} fn Callback, gets passed to this.getFlowUsers
	 * @return {FlowDockBot}      This instace for chaining
	 */
	this.getUsers = function(fn){
		
		for( var i in this.flows)
			this.getFlowUsers(this.flows[i].parameterized_name, fn)

		return this
	}

	/**
	 * Backup logfile
	 * @param  {Function} fn Callback. Takes a boolean param
	 */
	this.logBackup = function(fn){

		var _self = self
			fn = fn

		//test if logfile currently being backed up
		if(_self.flags.WRITING_BACKUP) return
		_self.flags.WRITING_BACKUP = true

		//get logfile line count
		var cmd = 'wc "'+self.filename+'" | awk {\'print $1\'}'
		exec(cmd, function FlowDockBot_logBackupExec(error, results) {

			if(error)
				throw new Error(error)

			var res = parseInt(results.trim())
				_fn = fn
				_self = _self

			//compare result with maxLogSize
			if( res > _self.maxLogSize ){

				//create backup
				var cmd = 'mv "'+_self.filename+'" "'+_self.filename+'.bak"'
				exec(cmd, function(err){

					if(err)
						throw new Error(err)

					if(typeof(fn) == 'function')
						_fn(true)


					_self.flags.WRITING_BACKUP = false
				})
			}
			else _self.flags.WRITING_BACKUP = false

			//default run callback
			if(typeof(fn) == 'function')
				fn(res)
		})		
	}

	/**
	 * Callback for this.getFlows. Parses flow information to this.flows
	 * @event flowsComplete
	 * @param  {http.serverResponse}   resp The server response
	 * @param  {callback} fn   Callback
	 */
	this.parseFlows = function(resp, cb){

		var _data = ''
		var _self = self
		var _cb = cb

		resp.setEncoding('utf8')
		resp.on( 'data', function(chunk){

			_data += chunk
		})
		resp.on( 'end', function(){

			var j = JSON.parse(_data)
			for(var i in j)
				_self.flows[j[i].parameterized_name] = j[i]

			_self.emit('flowsComplete')

			if(_cb)
				_cb(j)
		})
	}

	/**
	 * Callback for this.getFlowUsers. Parses flow user data to this.flows
	 * @param  {http.serverResponse}   resp The server response
	 * @param  {Function} cb   Callback Takes server.body json as param
	 */
	this.parseUsers = function(resp, cb){

		var _data = ''
		var _self = self
		var _cb = cb

		var flowName = resp.req.path.split('/')[3]

		resp.setEncoding('utf8')
		resp.on('data', function(chunk){
			_data += chunk
		})
		resp.on('end', function(){

			var j = JSON.parse(_data)
			_self.flows[flowName].users = j
			_self.countUserRequests--

			if(_cb)
				_cb(j)

			var res = {
				flow: flowName,
				users: j
			}

			_self.emit('usersComplete', res)
		})
	}

	/**
	 * Sets config and target url
	 * @param {object} obj The config object
	 */
	this.setConfig = function(obj){

		this.config = obj
		this.target = 'https://' + this.config.FLOW_TOKEN + '@api.flowdock.com'
	}

	/**
	 * Setup database
	 * @param  {Function} fn [description]
	 * @return {[type]}      [description]
	 */
	this.setupDB = function(fn){

		var cols = ['id', 'nick', 'last_activity']

		async.waterfall([

			//create database
			function(cb){

				db.connect(self.config.FLOW_ORG, function(){
					cb(null)
				})
			},

			//get flows
			function(cb){

				self.getFlows(function(resp){

					var _data = ''
					resp.setEncoding('utf8')
					resp.on( 'data', function(chunk){
						_data += chunk
					})
					resp.on('error', function(err){
						self.error(err)
					})
					resp.on( 'end', function(){

						try{
							var j = JSON.parse(_data)
							var flows = []
						}catch(e){
							throw e
						}
						
						j.forEach(function(flow){
							flows.push(flow.parameterized_name)
						})


						cb(null, flows)
					})
				})
			},

			//create tables
			function(flows, cb){
				var count = 0,
					tables = []

				flows.forEach(function(flow, i){

					db.create('table', flow, function(tblname){
						count++
						tables.push(tblname)
						if(count==flows.length)
							cb(null, tables)
					})
				})
			},

			//create cols
			function(tables, cb){

				var count = 0,
					length = tables.length

				for (var i = 0; i < length; i++) {
					
					db.create('col', {table: tables[i], col: cols}, function(j){
						var __tables = tables
						count++
						if(count==length)
							cb(null)
					})
				}
			}
		],

			//handle errors
			function(err){
				if(err)
					throw new Error(err)
				if(fn)
					fn()
			}
		)

		return self
	}

	/**
	 * Update the database
	 * @param  {json}   j  The json to update
	 * @param  {Function} fn Callback
	 */
	this.updateDB = function(j, fn){
		
		var flow = j.flow

		j.users.forEach(function(user, i){

			db.query(flow, {where: ["id", user.id]}, function(res){

				var old_date,
					row = {},
					res,
					ret = [],
					update = true

				function parseDate(input) {
					var parts = input.split('T');
					var parts2 = parts[0].split('-');
					return new Date(parts[0], parts[1]-1, parts[2]); // Note: months are 0-based
				}

				//if no results then store new activity
				if(!res){
					row = {
						id: user.id,
						flow: flow,
						organization: self.config.FLOW_ORG,
						nick: user.nick,
						logged: new Date().toISOString(),
						last_activity: new Date(user.last_activity).toISOString()
					}
					update = false
				}

				//compare last activities for the user
				else{
					var db_utc = new Date(res[0].last_activity);

					//update row
					if(db_utc.getTime()<user.last_activity){
						
						var user_utc = new Date(user.last_activity).toISOString()
						row = {
							id: user.id,
							flow: flow,
							organization: self.config.FLOW_ORG,
							nick: user.nick,
							logged: new Date().toISOString(),
							last_activity: user_utc
						}
					}
					else{
						if(fn)
							fn(null)
						return self
					}
				}

				str = JSON.stringify(row)
				ret.push(str)

				//write to log file
				fs.appendFile(self.filename, ret.join('\n')+'\n')

				//if updating record in db
				if(update){

					var query = {
						table: flow, 
						data: {
							where: ["id", user.id], 
							set: ["last_activity", row.last_activity]
						}
					}
					
					db.update('row', query, function(){
						if(i>=j.users.length-1)
							if(fn)
								fn(ret)
							
					})
				}

				//else insert new record
				else{
					db.insert(flow, [row.id, row.nick, row.last_activity], function(){
						if(i>=j.users.length-1){

							if(fn){
								fn(ret)
							}
						}
					})
				}
			})
		})		

		return self
	}

	/**
	 * Writes this.logData to log file
	 * @deprecated Replaced with self::updateDB()
	 * @param  {Function} fn Callback. Deftaul defined in this method
	 * @return {FlowDockBot}      This instance for chaining
	 */
	this.writeData = function(fn){
		return
		
		/**
		if(!Object.keys(self.logData).length)
			throw new Error('FlowDockBot.logData is empty. No logData gathered')

		//vars
		var cb,
			log = []
			_self = self

		//build up logfile data
		self.logData.forEach(function logDataTestForEach(item, index){
			log.push(JSON.stringify(item))
		})

		//construct callback
		fn ? 
			cb = fn : 
			cb = function(err){ 
				_self.emit('endLogWrite')
				_self.emit('logFinished')
		        _self.logData = new Array()

			}

		//write log, clean up
        return self
        */
	}

}
util.inherits(FlowDockBot, events.EventEmitter)
flowdock = new FlowDockBot()

var _ = {

	/**
	 * Returns the FlowDockBot instance
	 * @return {FlowDockBot} The current module instance
	 */
	getBot: function(){
		
		return flowdock
	},

	/**
	 * Return the database object
	 * @return {jsondb}
	 */
	getDB: function(){

		return db
	},

	/**
	 * Sets the flowdock config.
	 * @param {object} configYml Location of yaml config file
	 * @return {object} return's this for chaining
	 */
	setConfig: function(obj){
		flowdock.setConfig(obj)
		return this
	},

	/**
	 * main() method call
	 * @param {string} filename Required. The filename relative to project root.
	 * eg: 'logs/flowdock.log'
	 * @return {object} return's this for chaining
	 */
	run: function(filename, timer){

		if(!flowdock.config)
			throw new Error('Please set the configuration for flowdock')

		if(filename)
			flowdock.filename = filename

		flowdock.setupDB() //create database
			.on('flowsComplete', flowdock.getUsers)
			//.on('usersComplete', flowdock.getLogData)
			.on('usersComplete', flowdock.updateDB)
			//.on('logData', flowdock.writeData)
			.on('endLogWrite', flowdock.logBackup)

		setInterval(function(){
			flowdock.getFlows()
			}, timer)

		return this
	}
}

module.exports = _
